#!/bin/bash 

mtrInfo1=();mtrInfo2=()
taskName=$1
mtrName2=$3
declare -A mtrData1
declare -A mtrData2
declare -A mtrTrpData

CountDims(){
	local cols=0; local rows=0
	while read myLine; do
		cols=0

	       	for i in $myLine; do
			
			#
	                if [ $2 == 1 ]; then
	                        mtrData1[$rows,$cols]=$i
        	        else
                	        mtrData2[$rows,$cols]=$i
                	fi

			((cols++))
	        done
		((rows++))
	done < $1

	if [ $2 == 1 ]; then
		mtrInfo1=($rows $cols)
	else
		mtrInfo2=($rows $cols)
	fi
}

dims(){
	CountDims $1 1
	echo "${mtrInfo1[@]}"
}

GetMtrTranspose(){
	rows=$1;cols=$2
	
	for ((i=0;i<rows;i++)) do
		for((j=0;j<cols;j++)) do
		        if [ $3 == 1 ]; then
		                mtrTrpData[$j,$i]=${mtrData1[$i,$j]}
		        else
                		mtrTrpData[$j,$i]=${mtrData2[$i,$j]}
		       	fi
		done
	done
}

transpose(){
	
	CountDims $1 1
	GetMtrTranspose ${mtrInfo1[0]} ${mtrInfo1[1]} 1

	local cols=${mtrInfo1[0]};local rows=${mtrInfo1[1]}
	x=$(expr $cols - 1)
        for ((i=0;i<rows;i++)) do
		str=""
                for((j=0;j<cols;j++)) do
			
			echo -n "${mtrTrpData[$i,$j]}"
			if [ "$j" -ne "$x" ];then 
				echo -n "	"
			fi
                done
		echo
        done
}

mean(){
	local str=""
	CountDims $1 1
	
	#revers the row and col
	rows=${mtrInfo1[0]};cols=${mtrInfo1[1]}
	x=$(expr $cols - 1)
	for((i=0;i<cols;i++)) do
		sum=0
		for((j=0;j<rows;j++)) do
			sum=$(expr $sum + ${mtrData1[$j,$i]})
		done
		sum=$((($sum + ($rows/2)*( ($sum>0)*2-1 )) / $rows))
		echo -n "$sum"
		if [ "$i" -ne "$x" ]; then
			echo -n "	"
		fi
	done
	echo
}

add(){
	CountDims $1 1
	CountDims $2 2
	 
	if [[("${mtrInfo1[0]}" -ne "${mtrInfo2[0]}") || ("${mtrInfo1[1]}" -ne "${mtrInfo2[1]}")]]
	then
		echo "adding incompatible matrix!!" 1>&2
		exit 5;fi

        local rows=${mtrInfo1[0]}; local cols=${mtrInfo1[1]}
        x=$(expr $cols - 1)
	for((i=0;i<rows;i++)) do
		sumStr="";sum=0
		for((j=0;j<cols;j++)) do
			sum=$(expr ${mtrData1[$i,$j]} + ${mtrData2[$i,$j]})
			echo -n "$sum"
			if [ "$j" -ne "$x" ]; then
				echo -n "	";fi 
		done
		echo
	done		
}

multiply(){
        CountDims $1 1
        CountDims $2 2
	
	if ! [ "${mtrInfo1[1]}" == "${mtrInfo2[0]}" ]; then
		echo "mutiplying incompatible matrix" 1>&2
		exit 5;fi

	local aRows=${mtrInfo1[0]};local aCols=${mtrInfo1[1]}
	local bCols=${mtrInfo2[1]}

	x=$(expr $bCols - 1)

	for((i=0;i<aRows;i++)) do
		sumStr=""
		for ((j=0;j<bCols;j++)) do
			sum=0;mul=0
			for((k=0;k<aCols;k++))do		
	                        mul=$(( ${mtrData1[$i,$k]} * ${mtrData2[$k,$j]}))
				sum=$(expr $sum + $mul)
			done			
			
			echo -n "$sum"
			if [ "$j" -ne "$x" ]; then
				echo -n "	";fi
		done
		echo
	done
}

##############################################
# Getting the file from stdin or input file. #
##############################################
mtrName1="${2:-/dev/stdin}"

if ! [ -r $2 ]; then
	echo "file not readable!!" 1>&2
	exit 5 
fi

if ! [ -f $2 ]; then
	echo "File not found!!" 1>&2
	exit 5
fi

##################################################
# Checking operation name and argument numbers.  #
##################################################
if [[("$taskName" == "dims") || ("$taskName" == "transpose") || ("$taskName" == "mean")]]; then
	
	if (( $# > 2 )); then
		echo "Too many parameters!!" 1>&2
		exit 5; fi

	$taskName $mtrName1
	
elif [[("$taskName" == "add") || ("$taskName" == "multiply")]]; then
	
	if (( $# != 3 )); then
		echo "Too many parameters!!" 1>&2
		exit 5; fi

	$taskName $mtrName1 $mtrName2
else
	echo "Command not found!!" 1>&2
	exit 5
fi


exit 0
